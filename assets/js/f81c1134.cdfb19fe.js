"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"2024/terraform-provider-dynamic-configuration","metadata":{"permalink":"/blog/2024/terraform-provider-dynamic-configuration","source":"@site/../blogs/2024-08-20-terraform-providers.md","title":"Terraform Provider Dynamic Configuration","description":"I had a requirement where I wanted to work with Honeycombio\'s terraform provider. Unlike Datadog, Honeycomb has the concept of environments. It maps perfectly with our infra environments, i.e we can send prd telemetry to prd honeycomb environment and dev to dev.","date":"2024-08-20T00:00:00.000Z","tags":[{"inline":true,"label":"2024-08","permalink":"/blog/tags/2024-08"},{"inline":true,"label":"2024","permalink":"/blog/tags/2024"},{"inline":true,"label":"terraform","permalink":"/blog/tags/terraform"},{"inline":true,"label":"provider","permalink":"/blog/tags/provider"},{"inline":true,"label":"honeycomb","permalink":"/blog/tags/honeycomb"}],"readingTime":2.085,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Terraform Provider Dynamic Configuration","slug":"2024/terraform-provider-dynamic-configuration","tags":["2024-08","2024","terraform","provider","honeycomb"]},"unlisted":false,"nextItem":{"title":"Github Actions for the Blog","permalink":"/blog/2024/github-actions"}},"content":"I had a requirement where I wanted to work with Honeycombio\'s terraform provider. Unlike Datadog, Honeycomb has the concept of environments. It maps perfectly with our infra\x3c!-- truncate --\x3e environments, i.e we can send prd telemetry to prd honeycomb environment and dev to dev.\\n\\nHoneycomb provider uses API keys for configuration and each environment has its own keys. That meant that whenever we wanted to run our terraform code, we needed to set some env vars to specify the correct environment\'s api key. This gets particularly messy on our CI server, as we have a single instance to handle all our environments. When we ran a CI pipeline, there definetely is a way to specify which env it should target and we can very easily use that information in our terraform code. But terraform doesn\'t provide a native way to read any env vars. It reads `TF_VARS_xx` and target providers can read whetever env vars they expect to configure themselves. In case of Honeycomb, it\'s `HONEYCOMB_API_KEY`. But we can\'t mutate this nev var on CI server every time we run a job/pipeline, as there might be multiple jobs, simultaneoulys taregting both the dev and prd environments.\\n\\n## Solution\\nWe decided to store the API keys in AWS Secrets Manager. Our dev aws account stores the key for dev honeycomb env and prd for prd. We already have tooling in place to pass in the env specific AWS role when running the pipeline, so the terraform aws provider would be configured properly. \\n\\n:::note\\nWe could, of couse, modify the tooling to support this Honeycomb case in a similar way. But that didn\'t sound like a good idea. As it sets the precedent of doing this for all the providers we use or will use.\\n:::\\n\\nSo, the solution is simple. We use aws provider to fetch the target account\'s API key and use those to configure the honey-comb provider. Here\'s the code snippet\\n\\n```json title=\\"provider.tf\\"\\nterraform {\\n  required_providers {\\n    honeycombio = {\\n      source  = \\"honeycombio/honeycombio\\"\\n      version = \\"~> 0.26.0\\"\\n    }\\n    aws = {\\n        source = \\"hashicorp/aws\\"\\n    }\\n  }\\n}\\n\\ndata \\"aws_secretsmanager_secret\\" \\"honeycomb\\" {\\n  name = \\"<name of aws secret holding honeycomb api key>\\"\\n}\\n\\ndata \\"aws_secretsmanager_secret_version\\" \\"honeycomb\\" {\\n  secret_id = data.aws_secretsmanager_secret.honeycomb.id\\n}\\n\\nlocals {\\n  honeycomb_configuration_key = try(jsondecode(data.aws_secretsmanager_secret_version.honeycomb.secret_string)[\\"configuration_key\\"], null)\\n}\\n\\nprovider \\"honeycombio\\" {\\n  api_key = local.honeycomb_configuration_key\\n}\\n```\\n\\nThe same idea can be extended to other similar providers or to specify different configuration depending on the environemt, e.g: dev key with limited access and prd key with full access."},{"id":"2024/github-actions","metadata":{"permalink":"/blog/2024/github-actions","source":"@site/../blogs/20240816-github-actions.md","title":"Github Actions for the Blog","description":"Thinking about adding github actions to build and deploy this blog instead of running them on a VM on my machine. For some reason I couldn\'t get myself to install nodejs and npm on my regular workstation. Maybe I should do that as well.","date":"2024-08-16T09:47:46.000Z","tags":[{"inline":true,"label":"2024-08","permalink":"/blog/tags/2024-08"},{"inline":true,"label":"2024","permalink":"/blog/tags/2024"},{"inline":true,"label":"github action","permalink":"/blog/tags/github-action"}],"readingTime":1.89,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Github Actions for the Blog","slug":"2024/github-actions","tags":["2024-08","2024","github action"],"hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"Terraform Provider Dynamic Configuration","permalink":"/blog/2024/terraform-provider-dynamic-configuration"},"nextItem":{"title":"Reading List","permalink":"/blog/2024/reading-list"}},"content":"Thinking about adding github actions to build and deploy this blog instead of running them on a VM on my machine. For some reason\x3c!-- truncate --\x3e I couldn\'t get myself to install nodejs and npm on my regular workstation. Maybe I should do that as well.\\n\\nBut for the time being I\'m going to try my luck with github actions. Just added a github workflow file and pushing this blog file to master should trigger that. So, let get triggering!\\n\\nSo, that worked. But only halfway. The last step `npm run deploy` failed asking for my github username or specifying using ssh key. I was hoping that it would know how to push the changes as it was already running in github action. Let\'s see if `Claude Opus` can help us figure this out. After multiple back and forth it suggested to use this snippet\\n```yaml\\n- name: Deploy\\n    run: |\\n    npm run deploy\\n    working-directory: docusaurus\\n    env:\\n    GIT_USER: github-actions\\n    GIT_PASS: ${{ secrets.GITHUB_TOKEN }}\\n```\\nI think it should work. I\'m just not confident about the `GIT_USER` part. Should I use my github username there instead? Anyways, let\'s try pushing and see how it goes.\\n\\nThe action run was succesful but it still didn\'t deploy, complaining about setting git user email and stuff. So, let\'s try with\\n\\n```yaml\\n- name: Deploy\\n  run: |\\n    git config --global user.email \\"${{ github.actor }}@users.noreply.github.com\\"\\n    git config --global user.name \\"${{ github.actor }}\\"\\n    npm run deploy\\n  working-directory: docusaurus\\n  env:\\n    GIT_USER: ${{ github.actor }}\\n    GIT_PASS: ${{ secrets.GITHUB_TOKEN }}\\n```\\n\\nThat was it. The blog is \\"on\\" now. All I have to do is write and push to master and github will take care of build, deploy and hosting. Good times. You can find the complete and up-to-date code in github workflows of [this repo](https://github.com/nakamorg/nakamorg.github.io). One more thing though, I\'m not sure if the caching for node modules is working. Initial runs of `npm ci` took about 10 secs and the latest one with a cache hit took 6 secs - so maybe it\'s working? Maybe I can try doing `ls node_modules` in the github action and see or maybe there are other better options? But let\'s do that some other time. It\'s almost 19:18 and I need to get off working and start my work out."},{"id":"2024/reading-list","metadata":{"permalink":"/blog/2024/reading-list","source":"@site/../blogs/2024-08-15-reading-list.md","title":"Reading List","description":"I\'ve been thinking about managing a reading list, basically a list of urls or excerpts as I read them or get to know about them. Previously, I set up Linkwarden for this but didn\'t use it much (or at all). Hoping that this rlog (running blog) can substitute that. Hopefully, I\'ll keep it updated with everything insteresting I read on day to day basis, but it\'ll mostly be media that I\'d consume on my workstation (same machine I use to write this blog). Anyways, something is better than nothing. off we go","date":"2024-08-15T00:00:00.000Z","tags":[{"inline":true,"label":"reading","permalink":"/blog/tags/reading"},{"inline":true,"label":"reading-list","permalink":"/blog/tags/reading-list"}],"readingTime":1.15,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Reading List","slug":"2024/reading-list","tags":["reading","reading-list"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Github Actions for the Blog","permalink":"/blog/2024/github-actions"},"nextItem":{"title":"Started a second blog","permalink":"/blog/2024/started-second-blog"}},"content":"I\'ve been thinking about managing a reading list, basically a list of urls or excerpts as I read them or get to know about them. Previously, I set up Linkwarden\x3c!-- truncate --\x3e for this but didn\'t use it much (or at all). Hoping that this rlog (running blog) can substitute that. Hopefully, I\'ll keep it updated with everything insteresting I read on day to day basis, but it\'ll mostly be media that I\'d consume on my workstation (same machine I use to write this blog). Anyways, something is better than nothing. off we go\\n\\n## 2024-08-15\\n15th August - Independence Day, India\\n- [medium.com/yandex/good-retry-bad-retry-an-incident-story](https://medium.com/yandex/good-retry-bad-retry-an-incident-story-648072d3cee6) - Very interesting and fun read. Goes into the details of when and why `retries` should be used. How simple or simple exponetial backoff retries could be major issue when is system is recovering from downtime. Sugeests to use retries with `Retry Budget`, `Circuit Breaker`, `Load Shedding`, `Deadline Propogation` etc. Former two are implemented on client whereas later two on servers.\\n\\n## 2024-08-16\\n- [isovalent.com/blog/post/demystifying-cni](https://isovalent.com/blog/post/demystifying-cni) - A short article briefly discusses the container runtime and network interface and goes on to build a CNI plugin using bash. Apparently, you only need two files. A conf file at `/etc/cni/net.d/` and a CNI executable at `/opt/cni/bin/`. CRI loads the first conf file and finds the corresponding executable and then calls the CNI executable as per the CNI spec."},{"id":"2024/started-second-blog","metadata":{"permalink":"/blog/2024/started-second-blog","source":"@site/../blogs/2024-08-08-second-blog.md","title":"Started a second blog","description":"For some time, I wanted to start with a daily blog. Yes, I know I started this blog about four months ago and have only two entries as of now (including this one). Guess I\'m mostly into wasting my time finding which blog genertors to use and starting up a blog site but not into writing. Anyways, I wanted a new blog where I could write freely, without going into much details of the things, about my daily life and routine. I\'ve set up a docusaurus blog previously (the one you are currently reading). I spent some time checking if the mdbook would be a good fit for this daily journal blog. Fired up a test mdbook book and compared it with docusaurus style blog I had. Docusaurus style felt good to eyes (it looked nice) - so I decided to stick with docusaurus and started a second blog on same docusaurus instance. You can find it at /journal address of this site.","date":"2024-08-08T00:00:00.000Z","tags":[{"inline":true,"label":"2024-08","permalink":"/blog/tags/2024-08"},{"inline":true,"label":"2024","permalink":"/blog/tags/2024"},{"inline":true,"label":"journal","permalink":"/blog/tags/journal"},{"inline":true,"label":"daily","permalink":"/blog/tags/daily"},{"inline":true,"label":"multiple blogs","permalink":"/blog/tags/multiple-blogs"},{"inline":true,"label":"rss","permalink":"/blog/tags/rss"},{"inline":true,"label":"custom css","permalink":"/blog/tags/custom-css"}],"readingTime":4.855,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Started a second blog","slug":"2024/started-second-blog","tags":["2024-08","2024","journal","daily","multiple blogs","rss","custom css"]},"unlisted":false,"prevItem":{"title":"Reading List","permalink":"/blog/2024/reading-list"},"nextItem":{"title":"Welcome","permalink":"/blog/2024/blogging-platform"}},"content":"For some time, I wanted to start with a daily blog. Yes, I know I started this blog about four months ago and have only two entries as of now (including this one). Guess I\'m mostly into wasting\x3c!-- truncate --\x3e my time finding which blog genertors to use and starting up a blog site but not into writing. Anyways, I wanted a new blog where I could write freely, without going into much details of the things, about my daily life and routine. I\'ve set up a docusaurus blog previously (the one you are currently reading). I spent some time checking if the **mdbook** would be a good fit for this daily journal blog. Fired up a test mdbook book and compared it with docusaurus style blog I had. Docusaurus style felt good to eyes (it looked nice) - so I decided to stick with docusaurus and started a second blog on same docusaurus instance. You can find it at [/journal](/journal) address of this site.\\n\\n## Detail about the setup\\nThis blog lives at [nakamorg.github.io](https://github.com/nakamorg/nakamorg.github.io) github repo under the top level `blogs` folder. I created a new top level `journal` folder for the secondary blog. Idea is to dump any markdown file in that folder and have it served. To make it work, I updated the plugins section in my config file\\n```js title=\\"docusaurus.config.ts\\"\\n....\\n....\\n\\n  plugins: [\\n    [\\n      \'@docusaurus/plugin-content-blog\',\\n      {\\n        id: \'second-blog\',\\n        blogTitle: \'Journal\',\\n        blogDescription: \'Daily journal\',\\n        routeBasePath: \'journal\',\\n        path: \'../journal\',\\n        feedOptions: {\\n          type: [\'rss\', \'atom\'],\\n          title: \'nakam blog\',\\n          description: \'A daily journal from nakam blog\',\\n          copyright: \'nakam.org\',\\n          createFeedItems: async (params) => {\\n            const {blogPosts, defaultCreateFeedItems, ...rest} = params;\\n            return defaultCreateFeedItems({\\n              // keep only the 10 most recent blog posts in the feed\\n              blogPosts: blogPosts.filter((item, index) => index < 10),\\n              ...rest,\\n            });\\n          },\\n        },\\n      },\\n    ],\\n  ],\\n\\n....\\n....\\n```\\n\\nThat was it about adding a second blog. To make it easily accessable, I added another entry to the `navBar`\\n```js title=\\"docusaurus.config.ts\\"\\n  themeConfig: {\\n    navbar: {\\n      hideOnScroll: true,\\n      ....\\n      items: [\\n        {\\n          to: \'journal\',\\n          label: \'Journal\',\\n          position: \'left\'\\n        },\\n        {\\n          href: \'/rss.xml\',\\n          position: \'right\',\\n          className: \'feed-link\',\\n          \'aria-label\': \'rss Feed\',\\n        },\\n        {\\n          href: \'https://github.com/nakamorg\',\\n          position: \'right\',\\n          className: \'header-github-link\',\\n          \'aria-label\': \'GitHub repository\',\\n        },\\n      ],\\n    },\\n    ....\\n  }\\n```\\n\\nIf you noticed there are navigation items for feed and github as well, more on them later. Well, that was mostly it. While writing my first journal/daily blog, I realized that it\'s front-matter follows a pattern. I asked ChatGPT to generate me a bash script to create the blog template. This is what the script looks like\\n\\n```bash title=\\"daily-blog-creator.sh\\"\\n#!/bin/bash\\nset -eu\\n# Get the current date in the format yyyymmdd\\ncurrent_date=$(date +%Y%m%d)\\n\\n# Define the file name\\nfile_name=\\"journal/${current_date}-daily-journal.md\\"\\n\\n# Create the content\\ncontent=\\"---\\ntitle: $(date +%F) Daily Journal\\nslug: ${current_date}-daily-journal\\nauthors: [umesh]\\ntags:\\n- \'$(date +%Y-%m)\'\\n- \'$(date +%Y)\'\\n- journal\\n- daily\\nhide_table_of_contents: false\\n---\\nToday has been a please do something ab\x3c!-- truncate --\x3eout this and those.\\n\\"\\n\\necho \\"$content\\" > \\"$file_name\\"\\n```\\nRunning it would create a blog entry for that day. I used the `YYYY-MM` and `YYYY` tags - to make it easier to filter all the blogs from a particular year or month of the year.\\n\\nThat\'s the end of it. After all this was done I ran the script and wrote the first daily blog, you can find it at [/journal/2024/daily-journal](/journal/2024/daily-journal).\\n\\n## Other changes\\nI took some time today to fix some glaring issues with this blog. Like fixing the favicon and github, rss icons.\\n### Favicon\\nUsed [favicon-converter](https://favicon.io/favicon-converter/) on my profile image and generated the favicon images and copied those to `static/img` folder. One glaring issue down :relieved:\\n\\n### Github and Feed icons\\nThis is how the nav bar used to look before\\n![old nav bar](assets/navbar-20240808.png)\\nThe link for the rss feed of this blog and my github page looked so bad. I looked at how Docusaurus themselves have done it for their site and copied their config. So the navbar config looks like\\n```js title=\\"docusaurus.config.ts\\"\\n....\\n\\n      items: [\\n        {\\n          href: \'/rss.xml\',\\n          position: \'right\',\\n          className: \'feed-link\',\\n          \'aria-label\': \'rss Feed\',\\n        },\\n        {\\n          href: \'https://github.com/nakamorg\',\\n          position: \'right\',\\n          className: \'header-github-link\',\\n          \'aria-label\': \'GitHub repository\',\\n        },\\n      ],\\n\\n....\\n```\\ncorresponding css config\\n```css title=\\"src/css/custom.css\\"\\n....\\n\\n.header-github-link::before {\\n  content: \'\';\\n  width: 24px;\\n  height: 24px;\\n  display: flex;\\n  background-color: var(--ifm-navbar-link-color);\\n  mask-image: url(\\"data:image/svg+xml,%3Csvg viewBox=\'0 0 24 24\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cpath d=\'M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\'/%3E%3C/svg%3E\\");\\n  transition: background-color var(--ifm-transition-fast)\\n    var(--ifm-transition-timing-default);\\n}\\n\\n.header-github-link:hover::before {\\n  background-color: var(--ifm-navbar-link-hover-color);\\n}\\n\\n.feed-link::before {\\n  content: \'\';\\n  width: 24px;\\n  height: 24px;\\n  display: flex;\\n  background-color: var(--ifm-navbar-link-color);\\n  mask-image: url(\\"data:image/svg+xml,%3Csvg viewBox=\'0 0 24 24\' fill=\'none\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cg id=\'SVGRepo_bgCarrier\' stroke-width=\'0\'%3E%3C/g%3E%3Cg id=\'SVGRepo_tracerCarrier\' stroke-linecap=\'round\' stroke-linejoin=\'round\'%3E%3C/g%3E%3Cg id=\'SVGRepo_iconCarrier\'%3E%3Cpath d=\'M7 18C7 18.5523 6.55228 19 6 19C5.44772 19 5 18.5523 5 18C5 17.4477 5.44772 17 6 17C6.55228 17 7 17.4477 7 18Z\' stroke=\'%23323232\' stroke-width=\'2\'%3E%3C/path%3E%3Cpath d=\'M11 19C11 15.6863 8.31371 13 5 13\' stroke=\'%23323232\' stroke-width=\'2\' stroke-linecap=\'round\'%3E%3C/path%3E%3Cpath d=\'M15 19C15 13.4772 10.5228 9 5 9\' stroke=\'%23323232\' stroke-width=\'2\' stroke-linecap=\'round\'%3E%3C/path%3E%3Cpath d=\'M19 19C19 11.268 12.732 5 5 5\' stroke=\'%23323232\' stroke-width=\'2\' stroke-linecap=\'round\'%3E%3C/path%3E%3C/g%3E%3C/svg%3E\\");\\n  transition: background-color var(--ifm-transition-fast)\\n    var(--ifm-transition-timing-default);\\n}\\n\\n.feed-link:hover::before {\\n  background-color: var(--ifm-navbar-link-hover-color);\\n}\\n\\n....\\n```\\nFeel free to copy it if you need :wink:. I got the Github icon svg from the Docusaurus github repo. As for the rss icon, I downloded the svg from [www.svgrepo.com](https://www.svgrepo.com/svg/507840/rss) and then converted it to css using [yoksel.github.io/url-encoder](https://yoksel.github.io/url-encoder/).\\n\\nThat\'s all for today and this post. Ah well, one more thing. This is how the navigation bar looks after these changes (in case the current nav-bar has changed after this blog entry).\\n![new nav bar](./assets/new-navbar-20240808.png)\\n\\nMuch better than before and I like it a lot as of now."},{"id":"2024/blogging-platform","metadata":{"permalink":"/blog/2024/blogging-platform","source":"@site/../blogs/2024-04-26-welcome.md","title":"Welcome","description":"I think I have settled on my blogging platform","date":"2024-04-26T00:00:00.000Z","tags":[{"inline":true,"label":"hello","permalink":"/blog/tags/hello"},{"inline":true,"label":"welcome","permalink":"/blog/tags/welcome"}],"readingTime":2.6,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Welcome","description":"I think I have settled on my blogging platform","slug":"2024/blogging-platform","tags":["hello","welcome"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Started a second blog","permalink":"/blog/2024/started-second-blog"}},"content":"For last couple of years, I have been looking for platforms for publishing. I looked at couple of places but couldn\'t find what I was looking for. Here\'s a very short\x3c!-- truncate --\x3e list of things I wanted for my setup\\n1. I fully own my content without the need for specialized import/export jobs.\\n1. I don\'t want to write CSS/HTML/JS myself. I would be happy writing simple txt files or use markdown files.\\n1. Content can be tracked for changes over time.\\n1. While I would certainly like many people to read what I write. I do not want big players suggesting my content to their \\"users\\". Information overload is a big issue.\\n1. Organic content discovery.\\n1. Mainly static. I do not want (anymore) comments or discussions on the platform itself. They can happen outside and I\'d be happy to edit the blog to link those back.\\n\\nOf course, I didn\'t come with these requirements from the very begining and they may change over time.\\n\\n# Setup\\nSo, what did I do to achieve what I wanted? \\n\\nI am in git and on Github, so using those for version controlling and storing the content made sense. I know if the content is on Github then I don\'t \\"own\\" it - they can pull the plug for some reason - but let\'s not get that cynical and I\'ll probably have the repo cloned on my local.\\n\\nFor building the website, I did an internet search for `how to build blogging website using markdown files`. Couple of results showed up. Two notable were [**mdbook**](https://rust-lang.github.io/mdBook) and [**Docusaurus**](https://docusaurus.io/). I settled with Docusaurus as it provided some nice features like: tagging, read time estimations, rss feed, nicer looking UI out of the box and most importantly I didn\'t have to spend lots of time fidgeting with how to use it. Though it requires adding some metadata(`front matter`) to the markdown files, I guess I can live with it as it could be easily searched for, removed or edited if needed. I tried mdBook as well, and it felt very slick and clean for what it does and it took me under 10 minutes to set up compared to about an hour and half on Docusaurus. But it would have stitched all the blogs into a single book - which might not feel natural given that I might end up writing on bunch of stuff - which might not necessarily fit into a single book category.\\n\\nGiven that I have the content on my local or on my Github account and its just some markdown files, there are a bunch of options for publishing like using AWS S3, Github Pages, my home-server (which I don\'t run 24/7). I went with github pages(with custom domain), as it was easy to use and it doesn\'t matter - I can change the publisher whenever I want.\\n\\nWell, I guess that is it. Welcome to this blog created with **Docusaurus** and currently being served from . . . maybe check the response headers and stuff because I don\'t know where it might end up six months from now."}]}}')}}]);